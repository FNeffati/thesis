{"ast":null,"code":"var _jsxFileName = \"/Users/fneffati/Documents/Classes/Thesis/tbenvdash/src/components/MultiSelectDropdown.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MultiSelectDropdown({\n  options,\n  title\n}) {\n  _s();\n  const [selectedOptions, setSelectedOptions] = useState(new Set());\n  const toggleOption = option => {\n    setSelectedOptions(prevSelectedOptions => {\n      const newSelection = new Set(prevSelectedOptions);\n      if (newSelection.has(option)) {\n        newSelection.delete(option);\n      } else {\n        newSelection.add(option);\n      }\n      return newSelection;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [title, \":\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: option,\n          name: option,\n          checked: selectedOptions.has(option),\n          onChange: () => toggleOption(option)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: option,\n          children: option\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 25\n        }, this)]\n      }, option, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n}\n_s(MultiSelectDropdown, \"at4ZcIbwNCBdsX6uITzOO2bq130=\");\n_c = MultiSelectDropdown;\nexport default MultiSelectDropdown;\nvar _c;\n$RefreshReg$(_c, \"MultiSelectDropdown\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MultiSelectDropdown","options","title","_s","selectedOptions","setSelectedOptions","Set","toggleOption","option","prevSelectedOptions","newSelection","has","delete","add","children","fileName","_jsxFileName","lineNumber","columnNumber","map","type","id","name","checked","onChange","htmlFor","_c","$RefreshReg$"],"sources":["/Users/fneffati/Documents/Classes/Thesis/tbenvdash/src/components/MultiSelectDropdown.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction MultiSelectDropdown({ options, title }) {\n    const [selectedOptions, setSelectedOptions] = useState(new Set());\n\n    const toggleOption = (option) => {\n        setSelectedOptions(prevSelectedOptions => {\n            const newSelection = new Set(prevSelectedOptions);\n            if (newSelection.has(option)) {\n                newSelection.delete(option);\n            } else {\n                newSelection.add(option);\n            }\n            return newSelection;\n        });\n    };\n\n    return (\n        <div>\n            <label>{title}:</label>\n            <div>\n                {options.map(option => (\n                    <div key={option}>\n                        <input\n                            type=\"checkbox\"\n                            id={option}\n                            name={option}\n                            checked={selectedOptions.has(option)}\n                            onChange={() => toggleOption(option)}\n                        />\n                        <label htmlFor={option}>{option}</label>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default MultiSelectDropdown;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,mBAAmBA,CAAC;EAAEC,OAAO;EAAEC;AAAM,CAAC,EAAE;EAAAC,EAAA;EAC7C,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGR,QAAQ,CAAC,IAAIS,GAAG,CAAC,CAAC,CAAC;EAEjE,MAAMC,YAAY,GAAIC,MAAM,IAAK;IAC7BH,kBAAkB,CAACI,mBAAmB,IAAI;MACtC,MAAMC,YAAY,GAAG,IAAIJ,GAAG,CAACG,mBAAmB,CAAC;MACjD,IAAIC,YAAY,CAACC,GAAG,CAACH,MAAM,CAAC,EAAE;QAC1BE,YAAY,CAACE,MAAM,CAACJ,MAAM,CAAC;MAC/B,CAAC,MAAM;QACHE,YAAY,CAACG,GAAG,CAACL,MAAM,CAAC;MAC5B;MACA,OAAOE,YAAY;IACvB,CAAC,CAAC;EACN,CAAC;EAED,oBACIX,OAAA;IAAAe,QAAA,gBACIf,OAAA;MAAAe,QAAA,GAAQZ,KAAK,EAAC,GAAC;IAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACvBnB,OAAA;MAAAe,QAAA,EACKb,OAAO,CAACkB,GAAG,CAACX,MAAM,iBACfT,OAAA;QAAAe,QAAA,gBACIf,OAAA;UACIqB,IAAI,EAAC,UAAU;UACfC,EAAE,EAAEb,MAAO;UACXc,IAAI,EAAEd,MAAO;UACbe,OAAO,EAAEnB,eAAe,CAACO,GAAG,CAACH,MAAM,CAAE;UACrCgB,QAAQ,EAAEA,CAAA,KAAMjB,YAAY,CAACC,MAAM;QAAE;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxC,CAAC,eACFnB,OAAA;UAAO0B,OAAO,EAAEjB,MAAO;UAAAM,QAAA,EAAEN;QAAM;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GARlCV,MAAM;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASX,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACf,EAAA,CAlCQH,mBAAmB;AAAA0B,EAAA,GAAnB1B,mBAAmB;AAoC5B,eAAeA,mBAAmB;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}