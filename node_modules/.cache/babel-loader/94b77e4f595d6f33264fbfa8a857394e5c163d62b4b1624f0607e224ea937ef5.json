{"ast":null,"code":"var _jsxFileName = \"/Users/fneffati/Documents/Classes/Thesis/tbenvdash/src/components/WordCloud.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"../styling/WordCloud.css\";\nimport ReactWordcloud from 'react-wordcloud';\nimport 'tippy.js/dist/tippy.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordCloud = ({\n  cloud_type,\n  tweets,\n  onTweetsFetched\n}) => {\n  _s();\n  const [words, setWords] = useState([]);\n  const fetchTerms = () => {\n    fetch('/get_terms', {\n      'method': 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify([cloud_type, tweets])\n    }).then(response => response.json()).then(data => {\n      console.log(data[0]);\n      setWords([{\n        text: 'NO HASHTAGS AVAILABLE',\n        value: 64\n      }]);\n      onTweetsFetched(0);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n  useEffect(() => {\n    if (tweets.length === 0) {\n      setWords([{\n        text: 'NO TWEETS AVAILABLE',\n        value: 64\n      }]);\n    }\n  }, [tweets]);\n  useEffect(() => {\n    if (tweets.length !== 0) {\n      fetchTerms();\n    }\n  }, [tweets]);\n  useEffect(() => {\n    if (tweets.length !== 0 && words.length === 0) {\n      setWords([{\n        text: 'NO HASHTAGS AVAILABLE',\n        value: 64\n      }]);\n    }\n  }, [words, tweets]);\n  useEffect(() => {\n    fetchTerms();\n  }, [cloud_type]);\n  const options = {\n    rotations: 1,\n    rotationAngles: [0],\n    fontSizes: [15, 60],\n    colors: [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\"],\n    enableTooltip: true,\n    deterministic: false,\n    fontFamily: \"impact\",\n    fontStyle: \"normal\",\n    fontWeight: \"normal\",\n    padding: 1,\n    scale: \"sqrt\",\n    spiral: \"archimedean\",\n    transitionDuration: 1000\n  };\n  const size = [500, 600];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"all\",\n    children: /*#__PURE__*/_jsxDEV(ReactWordcloud, {\n      words: words,\n      options: options,\n      size: size,\n      padding: 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n_s(WordCloud, \"MwVjecsqz7JqNl36VksPhInUmLs=\");\n_c = WordCloud;\nexport default WordCloud;\nvar _c;\n$RefreshReg$(_c, \"WordCloud\");","map":{"version":3,"names":["React","useEffect","useState","ReactWordcloud","jsxDEV","_jsxDEV","WordCloud","cloud_type","tweets","onTweetsFetched","_s","words","setWords","fetchTerms","fetch","headers","body","JSON","stringify","then","response","json","data","console","log","text","value","catch","error","length","options","rotations","rotationAngles","fontSizes","colors","enableTooltip","deterministic","fontFamily","fontStyle","fontWeight","padding","scale","spiral","transitionDuration","size","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fneffati/Documents/Classes/Thesis/tbenvdash/src/components/WordCloud.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport \"../styling/WordCloud.css\"\nimport ReactWordcloud from 'react-wordcloud';\nimport 'tippy.js/dist/tippy.css';\n\n\n\n\n\nconst WordCloud = ({cloud_type, tweets, onTweetsFetched}) => {\n\n    const [words, setWords] = useState([]);\n\n    const fetchTerms = () => {\n        fetch('/get_terms',\n            {\n                'method':'POST',\n                headers : {\n                    'Content-Type':'application/json'\n                },\n                body: JSON.stringify([cloud_type, tweets])\n            })\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(data[0])\n\n                setWords([{ text: 'NO HASHTAGS AVAILABLE', value: 64 }]);\n                onTweetsFetched(0)\n            })\n            .catch((error) => {\n                console.error(error);\n            });\n    };\n\n    useEffect(() => {\n        if (tweets.length === 0) {\n            setWords([{ text: 'NO TWEETS AVAILABLE', value: 64 }]);\n        }\n    }, [tweets]);\n\n    useEffect(() => {\n        if (tweets.length !== 0) {\n            fetchTerms();\n        }\n    }, [tweets]);\n\n    useEffect(() => {\n        if (tweets.length !== 0 && words.length === 0) {\n            setWords([{ text: 'NO HASHTAGS AVAILABLE', value: 64 }]);\n        }\n    }, [words, tweets]);\n\n    useEffect(() => {\n        fetchTerms()\n    }, [cloud_type]);\n\n    const options = {\n        rotations: 1,\n        rotationAngles: [0],\n        fontSizes: [15,60],\n\n        colors: [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\"],\n        enableTooltip: true,\n        deterministic: false,\n        fontFamily: \"impact\",\n        fontStyle: \"normal\",\n        fontWeight: \"normal\",\n        padding: 1,\n        scale: \"sqrt\",\n        spiral: \"archimedean\",\n        transitionDuration: 1000\n\n    };\n    const size = [500, 600];\n\n    return (\n\n        <div className=\"all\">\n            <ReactWordcloud\n                words={words}\n                options={options}\n                size={size}\n                padding={0}\n\n            />\n        </div>\n    )\n};\n\nexport default WordCloud\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}